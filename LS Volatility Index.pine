// @version=5
// @License This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// @Author andre_007
// @description LS Volatility Index
// @Thanks and credits:
//      - Alexandre Wolwacz (Stormer), Fabrício Lorenz, Fábio Figueiredo (Vlad): for explanation of the original indicator
//      - Feature scaler (for normalization)
//      - HPotter (for calc of Historical Volatility)

indicator("LS Volatility Index", shorttitle='LS Volatility Index', format=format.price, precision=2, timeframe="")

// ------------------------- Constants {
var string GROUP_MA     = 'Moving Average of Price'
var string GROUP_LS     = 'LS Volatility Index'
var string GROUP_LS_AL  = 'Alerts for LS'
var string GROUP_ATR    = 'ATR - Average True Range'
var string GROUP_ATR_AL = 'Alerts for ATR'
var string TOOLTIP_1    = 'Moving Average of price.\n' +
  'The distance of the price to this moving average will be calculate through the LS indicator.\n' + 
  'The period has no effect on the VWAP.'
var string TOOLTIP_2    = 'Period used in normalization calculation.\n' + 
  'Normalization involves transforming the indicator in the range from 0 to 100.\n' + 
  'High values decrease noise, but as a side effect they can make it difficult to visualize current movements.\n' +
  'Low values increase noise, and as a side effect it generates a lot of pollution and false flags.'
var string TOOLTIP_3    = 'Indicator color when at the bottom or top.'
var string TOOLTIP_4    = 'This will show the ATR (Average True Range)'
var string TOOLTIP_6    = 'Values used in normalization range'
var string TOOLTIP_7    = 'Calculates the index dividing by historical volatility, that is, obtaining the ratio between candle variation and historical volatility.'
var string SMA          = 'Simple Moving Average'
var string EMA          = 'Exponential Moving Average'
var string HMA          = 'Hull Moving Average'
var string ALMA         = 'Arnaud Legoux Moving Average'
var string MEDIAN       = 'Median'
var string VWAP         = 'VWAP'
var color TRANSPARENT   = color.new(color.white, 100)
// ------------------------- }

// ------------------------- Inputs {

//---------------------
// LS Index
//---------------------
// Moving Average of Price
float srcMaPrice            = input.source(defval=close, title='Source', inline='1', group=GROUP_MA, tooltip=TOOLTIP_1)
var string typeMaPrice      = input.string(defval=EMA, title='Type',
  options=[SMA, EMA, HMA, ALMA, MEDIAN, VWAP],
  inline='1', group=GROUP_MA)
var int lenMaPrice          = input.int(defval=55, title='Length', inline='1', minval=1, group=GROUP_MA)

// LS Volatility Index
var int lenHistVol          = input.int(defval=89, title='Length for Historical Volatility', inline='4', minval=1, group=GROUP_LS)
var int lenNormal           = input.int(defval=89, title='Normalization Length', inline='5', minval=1, tooltip=TOOLTIP_2, group=GROUP_LS)
var color colorBottom       = input.color(defval=color.new(#3af13c, 0), title='Bottom', inline='6', tooltip=TOOLTIP_3, group=GROUP_LS)
var int lowerEndLs            = input.int(defval=0, title='', inline='6', group=GROUP_LS, tooltip=TOOLTIP_6)
var color colorTop          = input.color(defval=color.new(#ff0000, 0), title='Top', inline='6', tooltip=TOOLTIP_3, group=GROUP_LS)
var int upperEndLs            = input.int(defval=100, title='', inline='6', group=GROUP_LS, tooltip=TOOLTIP_6)

// Smooth LS
var bool boolSmoothLS       = input.bool(defval=false, title='Smooth indicator?', inline='10', group=GROUP_LS)
var string typeMaSmooth     = input.string(defval=EMA, title='Type', 
  options=[SMA, EMA, HMA, ALMA], inline='10', group=GROUP_LS)
var int lenSmoothLS         = input.int(defval=5, title='Length', inline='10', minval=1, group=GROUP_LS)

// Moving Average of LS
var bool showMaLS           = input.bool(defval=true, title='Show moving average?', inline='20', group=GROUP_LS)
var string typeMaLS         = input.string(defval=EMA, title='Type', 
  options=[SMA, EMA, HMA, ALMA, MEDIAN], inline='20', group=GROUP_LS)
var int lenMaLS             = input.int(defval=5, title='Length', inline='20', minval=1, group=GROUP_LS)

var color colorMaLS         = input.color(defval=color.white, title='Color of MA', inline='21', group=GROUP_LS)
var bool alterColorMaLs     = input.bool(defval=false, title='Change color of MA when above or bellow indicator?', inline='21', group=GROUP_LS)
var color colorAboveMaLS    = input.color(defval=color.new(#ff0000, 0), title='MA bellow indicator', inline='22', group=GROUP_LS)
var color colorBellowMaLS   = input.color(defval=color.new(#3af13c, 0), title='MA above indicator', inline='22', group=GROUP_LS)
var bool ribbonMaLs         = input.bool(defval=false, title='Apply ribbon filling between indicator and MA?', inline='23', group=GROUP_LS)

//--> Alerts
// Markers
var bool showMarkers        = input.bool(defval=true, title='Show markers when indicator reaches limit?', inline='30', group=GROUP_LS_AL)
var color colorMarkerBottom = input.color(defval=color.new(#3af13c, 0), title='Bottom', inline='31', group=GROUP_LS_AL)
var int bottomMarkerLS      = input.int(defval=0, title='', inline='31', group=GROUP_LS_AL)
var color colorMarkerTop    = input.color(defval=color.new(#ff0000, 0), title='Top', inline='31', group=GROUP_LS_AL)
var int topMarkerLS         = input.int(defval=100, title='', inline='31', group=GROUP_LS_AL)

// Fill Background
var bool showFill           = input.bool(defval=true, title='Fill background when indicator reaches limit?', inline='40', group=GROUP_LS_AL)
var color colorNearBg       = input.color(defval=color.new(#3af13c, 75), title='Bottom', inline='41', group=GROUP_LS_AL)
var int bottomFillLS        = input.int(defval=0, title='', inline='41', group=GROUP_LS_AL)
var color colorFarBg        = input.color(defval=color.new(#ff0000, 75), title='Top', inline='41', group=GROUP_LS_AL)
var int topFillLS           = input.int(defval=100, title='', inline='41', group=GROUP_LS_AL)

// Bar Color
var bool showBarColor       = input.bool(defval=true, title='Change bar color when indicator reaches limit?', inline='50', group=GROUP_LS_AL)
var color colorNearBar      = input.color(defval=color.new(#1101ff, 0), title='Bottom', inline='51', group=GROUP_LS_AL)
var int bottomBarLS         = input.int(defval=0, title='', inline='51', group=GROUP_LS_AL)
var color colorFarBar       = input.color(defval=color.new(#1101ff, 0), title='Top', inline='51', group=GROUP_LS_AL)
var int topBarLS            = input.int(defval=100, title='', inline='51', group=GROUP_LS_AL)

//---------------------
// ATR
//---------------------
var bool showATRvol         = input.bool(defval=true, title='Show ATR?', inline='60', group=GROUP_ATR, tooltip=TOOLTIP_4)
var int lenATR              = input.int(defval=5, minval=1, title='Length', inline='60', group=GROUP_ATR, tooltip=TOOLTIP_4)
var bool calcHistVol        = input.bool(defval=true, title='Consider Historical Volatility?', inline='61', group=GROUP_ATR, tooltip=TOOLTIP_7)
var color colorATRbottom    = input.color(defval=color.new(#0EEAFF, 50), title='Bottom', inline='62', tooltip=TOOLTIP_3, group=GROUP_ATR)
var int bottomATR           = input.int(defval=0, title='', inline='62', group=GROUP_ATR)
var color colorATRtop       = input.color(defval=color.new(#1101ff, 0), title='Top', inline='62', tooltip=TOOLTIP_3, group=GROUP_ATR)
var int topATR              = input.int(defval=100, title='', inline='62', group=GROUP_ATR)

// Smooth
var bool boolSmoothATR      = input.bool(defval=false, title='Smooth ATR?', inline='65', group=GROUP_ATR)
var string typeMaSmoothATR  = input.string(defval=EMA, title='Type', 
  options=[SMA, EMA, HMA, ALMA], inline='65', group=GROUP_ATR)
var int lenSmoothATR        = input.int(defval=5, title='Length', inline='65', minval=1, group=GROUP_ATR)

// --> Alerts
// Markers
var bool showMarkersATR     = input.bool(defval=true, title='Show markers when indicator reaches limit?', inline='66', group=GROUP_ATR_AL)
var color colorMarkerATRbot = input.color(defval=color.new(#3af13c, 0), title='Bottom', inline='67', group=GROUP_ATR_AL)
var int bottomMarkerATR     = input.int(defval=0, title='', inline='67', group=GROUP_ATR_AL)
var color colorMarkerATRtop = input.color(defval=color.new(#ff0000, 0), title='Top', inline='67', group=GROUP_ATR_AL)
var int topMarkerATR        = input.int(defval=100, title='', inline='67', group=GROUP_ATR_AL)

// Fill Background
var bool showFillATR        = input.bool(defval=true, title='Fill background when indicator reaches limit?', inline='70', group=GROUP_ATR_AL)
var color colorNearBgATR    = input.color(defval=color.new(#3af13c, 75), title='Bottom', inline='71', group=GROUP_ATR_AL)
var int bottomFillATR       = input.int(defval=0, title='', inline='71', group=GROUP_ATR_AL)
var color colorFarBgATR     = input.color(defval=color.new(#ff0000, 75), title='Top', inline='71', group=GROUP_ATR_AL)
var int topFillATR          = input.int(defval=100, title='', inline='71', group=GROUP_ATR_AL)

// Bar Color
var bool showBarColorATR    = input.bool(defval=true, title='Change bar color when indicator reaches limit?', inline='80', group=GROUP_ATR_AL)
var color colorNearBarATR   = input.color(defval=color.new(#1101ff, 0), title='Bottom', inline='81', group=GROUP_ATR_AL)
var int bottomBarATR        = input.int(defval=0, title='', inline='81', group=GROUP_ATR_AL)
var color colorFarBarATR    = input.color(defval=color.new(#1101ff, 0), title='Top', inline='81', group=GROUP_ATR_AL)
var int topBarATR           = input.int(defval=100, title='', inline='81', group=GROUP_ATR_AL)

// ------------------------- }

// ------------------------- Historical Volatility {
fHistoricalVolatility() =>
    historicalVolatility = 0.0
    
    xATR = ta.atr(lenHistVol)
    historicalVolatility := ((lenHistVol - 1) * nz(historicalVolatility[1], 0) + xATR) / lenHistVol
// ------------------------- }

// ------------------------- Moving Average {
fCalcMa(series float src, simple string type, simple int len) =>
    maRet = switch type
        SMA => ta.sma(src, len)
        EMA => ta.ema(src, len)
        HMA => ta.hma(src, len)
        ALMA => ta.alma(src, len, 0.85, 6, false)
        MEDIAN => ta.median(src, len)
        VWAP => ta.vwap(src)
// ------------------------- }

// ------------------------- Normalization {
fNormalize(series float src, simple int len, simple float _lowerEnd, simple float _upperEnd) =>
    min = ta.lowest(source=src, length=len)
    max = ta.highest(source=src, length=len)
    valueNormal = _lowerEnd + ( (src - min) * (_upperEnd - _lowerEnd)/(max - min) )
// ------------------------- }


// ------------------------- LS Volatility Index {
ma = fCalcMa(srcMaPrice, typeMaPrice, lenMaPrice)
distance = math.abs ( (high >= ma ? high : low) - ma) / ma
distance := distance * 100
historicalVolatility = fHistoricalVolatility()
lsVolatility = (distance/historicalVolatility) * 100

// Normalization
lsNormalized = fNormalize(src=lsVolatility, len=lenNormal, _lowerEnd=lowerEndLs, _upperEnd=upperEndLs)

// Smooth
if boolSmoothLS
    lsNormalized := fCalcMa(lsNormalized, typeMaSmooth, lenSmoothLS)

// Moving Average of LS Volatility Index
float maLS = na
if showMaLS
    maLS := fCalcMa(lsNormalized, typeMaLS, lenMaLS)
// ------------------------- }

// ------------------------- ATR {
float candleAmplitude =  ta.atr(lenATR)      // na(high[1])? high-low : math.max(math.max(high - low, math.abs(high - close[1])), math.abs(low - close[1]))
atrVolatilityIndex = if calcHistVol
    (candleAmplitude/historicalVolatility) * 100
else
    candleAmplitude

// Normalization
atrVolatilityIndexNormal = fNormalize(src=atrVolatilityIndex, len=lenNormal, _lowerEnd=bottomATR, _upperEnd=topATR)

// Smooth
if boolSmoothATR
    atrVolatilityIndexNormal := fCalcMa(atrVolatilityIndexNormal, typeMaSmoothATR, lenSmoothATR)
// ------------------------- }

// ------------------------- Plots - LS Volatility Index {
colorLS  = color.from_gradient(lsNormalized > lsNormalized[1] ? lsNormalized : lsNormalized[1], lowerEndLs, upperEndLs, colorBottom, colorTop)

colorMaLS := if alterColorMaLs
    if lsNormalized > maLS
        colorAboveMaLS
    else
        colorBellowMaLS        
else
    colorMaLS
    
lsPlot = plot(lsNormalized, color=colorLS, linewidth=2, title='LS Volatility Index')
maLsPlot = plot(maLS, color=colorMaLS, linewidth=2, title='Moving Average of LS Volatility Index')

// Lines
hLine000 = hline(0, color=TRANSPARENT, linestyle=hline.style_dotted, title='Botton Line')
hLine030 = hline(30, color=color.new(#ff0000, 0), linestyle=hline.style_dotted, title='Alert of Volatility')
hLine100 = hline(100, color=TRANSPARENT, linestyle=hline.style_dotted, title='Top Line')

plotchar(showMarkers and lsNormalized<=bottomMarkerLS ? lsNormalized : na, title='Marker when indicator reachs bottom', color=colorMarkerBottom, location=location.absolute, char='●', size=size.tiny)
plotchar(showMarkers and lsNormalized>=topMarkerLS ? lsNormalized : na, title='Marker when indicator reachs top', color=colorMarkerTop, location=location.absolute, char='●', size=size.tiny)


colorFillLsBottom = if showFill
    if lsNormalized <= bottomFillLS or lsNormalized[1] <= bottomFillLS
        colorNearBg
    else
        na
else
    na
    
colorFillLsTop = if showFill
    if lsNormalized >= topFillLS or lsNormalized[1] >= topFillLS
        colorFarBg
    else
        na
else
    na
    
fill(hLine000, hLine100, color=colorFillLsBottom, title='Fill background when indicator reachs bottom')
fill(hLine000, hLine100, color=colorFillLsTop, title='Fill background when indicator reachs top')

barcolor(barstate.isconfirmed and showBarColor and lsNormalized <= bottomBarLS ? colorNearBar : na, title='Bar color when indicator reachs bottom')
barcolor(barstate.isconfirmed and showBarColor and lsNormalized >= topBarLS ? colorFarBar : na, title='Bar color when indicator reachs top')

fill(lsPlot, maLsPlot, color=showMaLS and ribbonMaLs ? colorLS : na, title='Ribbon filling between indicator and MA')
// ------------------------- }

// ------------------------- Plots - ATR {
colorAtr  = showATRvol ? color.from_gradient(atrVolatilityIndexNormal > atrVolatilityIndexNormal[1] ? atrVolatilityIndexNormal : atrVolatilityIndexNormal[1], bottomATR, topATR, colorATRbottom, colorATRtop) : na
plot(atrVolatilityIndexNormal, color=colorAtr, linewidth=1, title='ATR', style=plot.style_histogram)

barcolor(showATRvol and barstate.isconfirmed and showBarColorATR and atrVolatilityIndexNormal <= bottomBarATR ? colorNearBarATR : na, title='Bar color when ATR reachs bottom')
barcolor(showATRvol and barstate.isconfirmed and showBarColorATR and atrVolatilityIndexNormal >= topBarATR ? colorFarBarATR : na, title='Bar color when ATR reachs top')

plotchar(showATRvol and showMarkersATR and atrVolatilityIndexNormal <= bottomMarkerATR ? atrVolatilityIndexNormal : na, title='Marker when ATR reachs bottom', color=colorMarkerATRbot, location=location.absolute, char='▪', size=size.tiny)
plotchar(showATRvol and showMarkersATR and atrVolatilityIndexNormal >= topMarkerATR ? atrVolatilityIndexNormal : na, title='Marker when ATR reachs top', color=colorMarkerATRtop, location=location.absolute, char='▪', size=size.tiny)

colorFillAtrBottom = if showFillATR 
    if atrVolatilityIndexNormal <= bottomFillATR or atrVolatilityIndexNormal[1] <= bottomFillATR
        colorNearBgATR
    else 
        na
else
    na
    
colorFillAtrTop = if showFillATR
    if atrVolatilityIndexNormal >= topFillATR or atrVolatilityIndexNormal[1] >= topFillATR
        colorFarBgATR
    else 
        na
else
    na

fill(hLine000, hLine100, color=colorFillAtrBottom, title='Fill background when ATR reachs bottom')
fill(hLine000, hLine100, color=colorFillAtrTop, title='Fill background when ATR reachs top')
// ------------------------- }